package healthinformationsystem.his.endToEndTests;

import com.jayway.jsonpath.JsonPath;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;


@SpringBootTest
@AutoConfigureMockMvc
public class PatientControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @PersistenceContext
    private EntityManager entityManager;


    @Test
    void contextLoads() {
    }

    @Test
    @DisplayName("Patient with correct fields is saved to DB")
    public void patientIsSavedToDB() throws Exception {
        var patientJson = """
                {
                    "title": "Ms",
                    "firstName": "Jamila",
                    "lastName": "Cuisine",
                    "birthDate": "12.03.1975",
                    "phone": "01908564897",
                    "email": "JamCui@sneakmail.co.uk",
                    "address": {
                        "number": 45,
                        "street": "St. Michaels",
                        "city": "Rainsfield",
                        "county": "Notts",
                        "postcode": "NG1 5PG",
                        "country": "UK"
                    },
                    "weight": 80,
                    "height": 1.68,
                        "wardId": 102,
                    "allergies": [
                        "Peanuts",
                        "Tetracycline",
                        "Strawberries"
                    ],
                    "illnesses": [
                        {
                            "name": "Cardiomyopathy",
                            "dateDiagnosed": "11.05.2022"
                        },
                        {
                            "name": "Tendinitis",
                            "dateDiagnosed": "11.12.2018"
                        }
                    ]
                }
                """;

        mockMvc.perform(post("/patients/admit")
                        .content(patientJson)
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(content().json(patientJson));
    }

    @Test
    @DisplayName("Patient saved to DB contains the expected autogenerated fields")
    @Sql(statements = """
            DELETE FROM his_2.patient_illnesses;
            DELETE FROM his_2.patient_allergies;
            DELETE FROM his_2.patients;
            """,
            executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
    public void patientIsSavedToDB2() throws Exception {

        var patientJson = """
                {
                    "title": "Ms",
                    "firstName": "Jamila",
                    "lastName": "Cuisine",
                    "birthDate": "12.03.1975",
                    "phone": "01908564897",
                    "email": "JamCui@sneakmail.co.uk",
                    "address": {
                        "number": 45,
                        "street": "St. Michaels",
                        "city": "Rainsfield",
                        "county": "Notts",
                        "postcode": "NG1 5PG",
                        "country": "UK"
                    },
                    "weight": 80,
                    "height": 1.68,
                        "wardId": 102,
                    "allergies": [
                        "Peanuts",
                        "Tetracycline",
                        "Strawberries"
                    ],
                    "illnesses": [
                        {
                            "name": "Cardiomyopathy",
                            "dateDiagnosed": "11.05.2022"
                        },
                        {
                            "name": "Tendinitis",
                            "dateDiagnosed": "11.12.2018"
                        }
                    ]
                }
                """;

        var result = mockMvc.perform(post("/patients/admit")
                        .content(patientJson)
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(jsonPath("$.id").isNumber())
                .andExpect(jsonPath("$.fullName").value("Ms Jamila Cuisine"))
                .andExpect(jsonPath("$.age").isNumber())
                .andExpect(jsonPath("$.firstCreated").isNotEmpty())
                .andExpect(jsonPath("$.lastModified").isNotEmpty())
                .andReturn();
        var firstCreated = JsonPath.read(result.getResponse().getContentAsString(), "$.firstCreated");
        var lastModified = JsonPath.read(result.getResponse().getContentAsString(), "$.lastModified");
        var firstCreatedDate = LocalDateTime.parse((CharSequence) firstCreated).toInstant(ZoneOffset.UTC).toEpochMilli();
        var lastModifiedDate = LocalDateTime.parse((CharSequence) lastModified).toInstant(ZoneOffset.UTC).toEpochMilli();
        assertTrue((lastModifiedDate - firstCreatedDate) < 3);
    }

    @Test
    @DisplayName("Patient saved to DB contains the expected autogenerated fields")
    @Sql(statements = """
            DELETE FROM his_2.patient_illnesses;
            DELETE FROM his_2.patient_allergies;
            DELETE FROM his_2.patients;
            """,
            executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
    public void patientIsUpdated() throws Exception {

        var patientJson = """
                {
                    "title": "Ms",
                    "firstName": "Jamila",
                    "lastName": "Cuisine",
                    "birthDate": "12.03.1975",
                    "phone": "01908564897",
                    "email": "JamCui@sneakmail.co.uk",
                    "address": {
                        "number": 45,
                        "street": "St. Michaels",
                        "city": "Rainsfield",
                        "county": "Notts",
                        "postcode": "NG1 5PG",
                        "country": "UK"
                    },
                    "weight": 80,
                    "height": 1.68,
                        "wardId": 102,
                    "allergies": [
                        "Peanuts",
                        "Tetracycline",
                        "Strawberries"
                    ],
                    "illnesses": [
                        {
                            "name": "Cardiomyopathy",
                            "dateDiagnosed": "11.05.2022"
                        },
                        {
                            "name": "Tendinitis",
                            "dateDiagnosed": "11.12.2018"
                        }
                    ]
                }
                """;

        var result = mockMvc.perform(post("/patients/admit")
                        .content(patientJson)
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(jsonPath("$.id").isNumber())
                .andExpect(jsonPath("$.fullName").value("Ms Jamila Cuisine"))
                .andExpect(jsonPath("$.age").isNumber())
                .andExpect(jsonPath("$.firstCreated").isNotEmpty())
                .andExpect(jsonPath("$.lastModified").isNotEmpty())
                .andReturn();
        var firstCreated = JsonPath.read(result.getResponse().getContentAsString(), "$.firstCreated");
        var lastModified = JsonPath.read(result.getResponse().getContentAsString(), "$.lastModified");
        var firstCreatedDate = LocalDateTime.parse((CharSequence) firstCreated).toInstant(ZoneOffset.UTC).toEpochMilli();
        var lastModifiedDate = LocalDateTime.parse((CharSequence) lastModified).toInstant(ZoneOffset.UTC).toEpochMilli();
        assertTrue((lastModifiedDate - firstCreatedDate) < 3);
    }
}
